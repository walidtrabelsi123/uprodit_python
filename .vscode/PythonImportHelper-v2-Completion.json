[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "service",
        "description": "service",
        "detail": "service",
        "documentation": {}
    },
    {
        "label": "ProfileRepository",
        "importPath": "repository",
        "description": "repository",
        "isExtraImport": true,
        "detail": "repository",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "model",
        "description": "model",
        "isExtraImport": true,
        "detail": "model",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "get_all_profiles",
        "kind": 2,
        "importPath": "backend.flaskapp.uprodit.app",
        "description": "backend.flaskapp.uprodit.app",
        "peekOfCode": "def get_all_profiles():\n    profiles = hello_service.get_all_profiles()\n    profile_list = [{'id': profile.user_id,\n                     'first_name': profile.first_name,\n                     'last_name': profile.last_name,\n                     'email_address': profile.email_address,\n                     'phone_number': profile.phone_number,\n                    'specialities': profile.specialities.split(\",\")\n                     } for profile in profiles]\n    return jsonify(profile_list)",
        "detail": "backend.flaskapp.uprodit.app",
        "documentation": {}
    },
    {
        "label": "add_user",
        "kind": 2,
        "importPath": "backend.flaskapp.uprodit.app",
        "description": "backend.flaskapp.uprodit.app",
        "peekOfCode": "def add_user():\n    data = request.json\n    #loop through specialities array and convert to string with comma without comma\n    specialities = \"\"\n    for i in data['specialities']:\n        specialities = specialities + i + \",\"\n    # delete the last comma\n    specialities = specialities[:-1]  \n    hello_service.create_profile(data['first_name'],data['last_name'],data['email_address'],data['phone_number'],specialities)\n    return data",
        "detail": "backend.flaskapp.uprodit.app",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "backend.flaskapp.uprodit.app",
        "description": "backend.flaskapp.uprodit.app",
        "peekOfCode": "def delete_user(id):\n    hello_service.delete_profile(id)\n    return id\nif __name__ == '__main__':\n    app.run()",
        "detail": "backend.flaskapp.uprodit.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.flaskapp.uprodit.app",
        "description": "backend.flaskapp.uprodit.app",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:12848499@localhost:3000/Master'\ndb.init_app(app)\nCORS(app)\n# Create an instance of ProfileRepository\nprofile_repository = ProfileRepository()\n# Create a Flask app instance\nhello_service = service.HelloService(profile_repository)\n@app.route('/profiles', methods=['GET'])\ndef get_all_profiles():",
        "detail": "backend.flaskapp.uprodit.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "backend.flaskapp.uprodit.app",
        "description": "backend.flaskapp.uprodit.app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:12848499@localhost:3000/Master'\ndb.init_app(app)\nCORS(app)\n# Create an instance of ProfileRepository\nprofile_repository = ProfileRepository()\n# Create a Flask app instance\nhello_service = service.HelloService(profile_repository)\n@app.route('/profiles', methods=['GET'])\ndef get_all_profiles():\n    profiles = hello_service.get_all_profiles()",
        "detail": "backend.flaskapp.uprodit.app",
        "documentation": {}
    },
    {
        "label": "profile_repository",
        "kind": 5,
        "importPath": "backend.flaskapp.uprodit.app",
        "description": "backend.flaskapp.uprodit.app",
        "peekOfCode": "profile_repository = ProfileRepository()\n# Create a Flask app instance\nhello_service = service.HelloService(profile_repository)\n@app.route('/profiles', methods=['GET'])\ndef get_all_profiles():\n    profiles = hello_service.get_all_profiles()\n    profile_list = [{'id': profile.user_id,\n                     'first_name': profile.first_name,\n                     'last_name': profile.last_name,\n                     'email_address': profile.email_address,",
        "detail": "backend.flaskapp.uprodit.app",
        "documentation": {}
    },
    {
        "label": "hello_service",
        "kind": 5,
        "importPath": "backend.flaskapp.uprodit.app",
        "description": "backend.flaskapp.uprodit.app",
        "peekOfCode": "hello_service = service.HelloService(profile_repository)\n@app.route('/profiles', methods=['GET'])\ndef get_all_profiles():\n    profiles = hello_service.get_all_profiles()\n    profile_list = [{'id': profile.user_id,\n                     'first_name': profile.first_name,\n                     'last_name': profile.last_name,\n                     'email_address': profile.email_address,\n                     'phone_number': profile.phone_number,\n                    'specialities': profile.specialities.split(\",\")",
        "detail": "backend.flaskapp.uprodit.app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "backend.flaskapp.uprodit.db",
        "description": "backend.flaskapp.uprodit.db",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "backend.flaskapp.uprodit.db",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "backend.flaskapp.uprodit.model",
        "description": "backend.flaskapp.uprodit.model",
        "peekOfCode": "class Profile(db.Model):\n    __tablename__ = 'customers'\n    user_id = db.Column(db.Integer, primary_key=True)\n    first_name = db.Column(db.String(255), nullable=False)\n    last_name = db.Column(db.String(255), nullable=False)\n    email_address = db.Column(db.String(255), nullable=True)\n    phone_number = db.Column(db.Integer, nullable=False)\n    specialities = db.Column(db.String(255), nullable=True)\n    def get_full_name(self):\n        return f\"{self.first_name} {self.last_name}\"",
        "detail": "backend.flaskapp.uprodit.model",
        "documentation": {}
    },
    {
        "label": "ProfileRepository",
        "kind": 6,
        "importPath": "backend.flaskapp.uprodit.repository",
        "description": "backend.flaskapp.uprodit.repository",
        "peekOfCode": "class ProfileRepository:\n    def create_profile(self, first_name, last_name, email_address, phone_number, specialities):\n        profile = Profile(first_name=first_name, last_name=last_name, email_address=email_address, phone_number=phone_number, specialities=specialities)\n        db.session.add(profile)\n        db.session.commit()\n        return profile\n    def get_all_profiles(self):\n        return Profile.query.all()\n    def update_profile_specialities(self, profile_id, new_specialities):\n        profile = Profile.query.get(profile_id)",
        "detail": "backend.flaskapp.uprodit.repository",
        "documentation": {}
    },
    {
        "label": "HelloService",
        "kind": 6,
        "importPath": "backend.flaskapp.uprodit.service",
        "description": "backend.flaskapp.uprodit.service",
        "peekOfCode": "class HelloService:\n    def __init__(self, profile_repository):\n        self.profile_repository = profile_repository\n    def get_hello_message(self):\n        return \"Hello from the service!\"\n    def get_all_profiles(self):\n        return self.profile_repository.get_all_profiles()\n    def create_profile(self, first_name, last_name, email_address, phone_number, specialities):\n        return self.profile_repository.create_profile(first_name, last_name, email_address, phone_number, specialities)\n    def update_profile_specialities(self, profile_id, new_specialities):",
        "detail": "backend.flaskapp.uprodit.service",
        "documentation": {}
    }
]